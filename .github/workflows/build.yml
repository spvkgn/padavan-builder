name: Build firmware

on:
  workflow_dispatch:

jobs:
  pre:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.targets.outputs.matrix }}
    steps:
    - uses: actions/checkout@v4

    - name: Get targets
      id: targets
      run: echo "matrix=$(ls targets | jq -cnR '[inputs | select(length>0)]')" >> $GITHUB_OUTPUT

  build:
    name: 'build :: ${{ matrix.product_id }}'
    needs: pre
    runs-on: ubuntu-latest
    container: registry.gitlab.com/hadzhioglu/padavan-ng
    defaults: { run: { shell: bash } }
    strategy:
      matrix:
        product_id: ${{ fromJson(needs.pre.outputs.matrix) }}
    steps:
    - uses: actions/checkout@v4

    - name: Get variables
      run: |
        cp targets/${{ matrix.product_id }}/variables .
        cp targets/${{ matrix.product_id }}/*.config build.config
        sed -i 's|\r$||g' variables build.config
        . <(cat variables build.config)
        PADAVAN_THEMES="${PADAVAN_THEMES[*]}"
        for v in "${!PADAVAN_@}" "${!CONFIG_@}"; do
          echo "$v=${!v}" >> $GITHUB_ENV
        done

    - name: Download sources and toolchain
      run: |
        git config --global --add safe.directory '*'
        git clone -b "$PADAVAN_BRANCH" "$PADAVAN_REPO"
        git -C padavan-ng checkout "$PADAVAN_COMMIT"
        if [[ -d targets/${{ matrix.product_id }}/patches ]]; then
          git -C padavan-ng apply -v $GITHUB_WORKSPACE/targets/${{ matrix.product_id }}/patches/*.patch
        fi
        wget -qO- "$PADAVAN_TOOLCHAIN_URL" | tar -C padavan-ng --zstd -xf -

    - name: Install themes
      run: |
        if [[ -n $PADAVAN_THEMES ]]; then
          git clone --depth 1 -b "$PADAVAN_THEMES_BRANCH" "$PADAVAN_THEMES_REPO" themes
          cp -r themes/common-theme themes/jquery.js padavan-ng/trunk/user/www/n56u_ribbon_fixed

          for theme in $PADAVAN_THEMES; do
            echo "Installing $theme theme"
            cp -r "themes/$theme-theme" padavan-ng/trunk/user/www/n56u_ribbon_fixed
          done
        fi

    - name: Run custom pre-build script
      run: '[[ -f pre-build.sh ]] && . pre-build.sh || :'

    - name: Build firmware
      run: |
        cp build.config padavan-ng/trunk/.config
        pushd padavan-ng/trunk
        ./clear_tree.sh
        ./build_firmware.sh | tee $GITHUB_WORKSPACE/build_firmware.log
        popd

    - name: Run custom post-build script
      run: '[[ -f post-build.sh ]] && . post-build.sh || :'

    - name: Prepare artifacts
      run: |
        FW_FILE_NAME="$(find padavan-ng/trunk/images -type f -regextype posix-extended -iregex ".*\.(trx|bin)$" \
                        -printf "%T@\t%f\n" | sort -V | tail -1 | cut -f2)"
        cp "padavan-ng/trunk/images/$FW_FILE_NAME" .
        echo "FW_FILE_NAME=$FW_FILE_NAME" >> $GITHUB_ENV
        echo "BUILD_TIMESTAMP=$(date '+%Y%m%d.%H%M%S')" >> $GITHUB_ENV

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: padavan-ng_${{ env.CONFIG_VENDOR }}_${{ env.CONFIG_FIRMWARE_PRODUCT_ID }}_${{ env.BUILD_TIMESTAMP }}
        path: |
          ${{ env.FW_FILE_NAME }}
          build.config
          build_firmware.log

    - name: Check firmware size
      run: |
        partitions=padavan-ng/trunk/configs/boards/$CONFIG_VENDOR/$CONFIG_FIRMWARE_PRODUCT_ID/partitions.config
        max_fw_size="$(awk '/Firmware/ { getline; getline; sub(",", ""); print strtonum($2); }' "$partitions")"
        fw_size="$(stat -c %s "$FW_FILE_NAME")"

        if ((fw_size > max_fw_size)); then
          fw_size_fmtd="$(numfmt --grouping "$fw_size") bytes"
          max_fw_size_fmtd="$(numfmt --grouping "$max_fw_size") bytes"
          echo "Firmware size ($fw_size_fmtd) exceeds max size ($max_fw_size_fmtd) for your target device"
          exit 1
        fi

  release:
    needs: build
    permissions:
      contents: write
    runs-on: ubuntu-latest
    steps:
    - name: Download artifacts
      uses: actions/download-artifact@v4

    - name: Prepare for release upload
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        printf "| %s | %s | %s |\n" Device "Firmware filename" sha256sum --- --- --- > body.txt
        for dir in $(ls -d padavan-ng*); do
          (
            cd $dir
            FW_FILE=$(ls *.trx)
            VENDOR=$(grep -Po '^CONFIG_VENDOR=\K.+' *.config)
            PRODUCT_ID=$(echo $FW_FILE | cut -d_ -f1)
            RELEASE_ZIP=$(basename $FW_FILE .trx).zip
            # Generate checksum
            printf "| %s | %s | %s |\n" "$VENDOR $PRODUCT_ID" $FW_FILE $(sha256sum $FW_FILE | tee -a sha256sums.txt | awk '{ print $1 }') >> $GITHUB_WORKSPACE/body.txt
            # Create release zip
            zip $GITHUB_WORKSPACE/$RELEASE_ZIP $FW_FILE build.config build_firmware.log sha256sums.txt
          )
        done
        # Delete existing release
        gh release delete latest --cleanup-tag -y -R ${{ github.repository }} || true
        # Get FW version
        VER=$(wget -qO- https://gitlab.com/hadzhioglu/padavan-ng/-/raw/master/trunk/versions.inc | awk -F= '/FIRMWARE_ROOTFS_VER/ { rootfs=$2 } /FIRMWARE_BUILDS_VER/ { print rootfs "-" $2 }')
        SHA_SHORT=$(wget -qO- https://gitlab.com/api/v4/projects/40277088/repository/commits | jq -r '.[0].short_id')
        echo "FW_VERSION=3.4.$VER-$SHA_SHORT" >> $GITHUB_ENV

    - name: Upload release
      uses: softprops/action-gh-release@v2
      with:
        fail_on_unmatched_files: true
        prerelease: false
        draft: false
        tag_name: latest
        name: ${{ env.FW_VERSION }}
        body_path: body.txt
        files: '*.zip'
